diff -uprN linux-4.4.137/net/socket.c popcorn-kernel/net/socket.c
--- linux-4.4.137/net/socket.c	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/net/socket.c	2020-03-30 16:06:52.842727104 -0400
@@ -108,6 +108,11 @@
 #include <net/busy_poll.h>
 #include <linux/errqueue.h>
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/types.h>
+#include <popcorn/syscall_server.h>
+#endif
+
 #ifdef CONFIG_NET_RX_BUSY_POLL
 unsigned int sysctl_net_busy_read __read_mostly;
 unsigned int sysctl_net_busy_poll __read_mostly;
@@ -1210,6 +1215,7 @@ int sock_create_kern(struct net *net, in
 }
 EXPORT_SYMBOL(sock_create_kern);
 
+
 SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)
 {
 	int retval;
@@ -1222,6 +1228,18 @@ SYSCALL_DEFINE3(socket, int, family, int
 	BUILD_BUG_ON(SOCK_CLOEXEC & SOCK_TYPE_MASK);
 	BUILD_BUG_ON(SOCK_NONBLOCK & SOCK_TYPE_MASK);
 
+#ifdef CONFIG_POPCORN
+	/* We want to create a remote socket on master node */
+	if (distributed_remote_process(current)) {
+		retval = redirect_socket(family, type, protocol);
+		SSPRINTK("remote socket created. ret fd: %d\n", retval);
+		SSPRINTK("pid: %d, nid: %d\n",
+			 current->origin_pid, current->origin_nid);
+		SSPRINTK("is worker: %d, at remote: %d\n", current->is_worker,
+			 current->at_remote);
+		return retval;
+	}
+#endif
 	flags = type & ~SOCK_TYPE_MASK;
 	if (flags & ~(SOCK_CLOEXEC | SOCK_NONBLOCK))
 		return -EINVAL;
@@ -1366,6 +1384,14 @@ SYSCALL_DEFINE3(bind, int, fd, struct so
 	struct sockaddr_storage address;
 	int err, fput_needed;
 
+#ifdef CONFIG_POPCORN
+	/* We want to redirect bind back to origin */
+	if (distributed_remote_process(current)) {
+		err = redirect_bind(fd, umyaddr, addrlen);
+		SSPRINTK("remote bind ret: %d\n", err);
+		return err;
+	}
+#endif
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock) {
 		err = move_addr_to_kernel(umyaddr, addrlen, &address);
@@ -1395,6 +1421,14 @@ SYSCALL_DEFINE2(listen, int, fd, int, ba
 	int err, fput_needed;
 	int somaxconn;
 
+#ifdef CONFIG_POPCORN
+	/* We want to redirect listen() back to origin */
+	if (distributed_remote_process(current)) {
+		err = redirect_listen(fd, backlog);
+		SSPRINTK("remote listen ret: %d\n", err);
+		return err;
+	}
+#endif
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock) {
 		somaxconn = sock_net(sock->sk)->core.sysctl_somaxconn;
@@ -1430,6 +1464,14 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	int err, len, newfd, fput_needed;
 	struct sockaddr_storage address;
 
+#ifdef CONFIG_POPCORN
+	/* We want to redirect accept4 back to origin */
+	if (distributed_remote_process(current)) {
+		err = redirect_accept4(fd, upeer_sockaddr, upeer_addrlen,
+				       flags);
+		return err;
+	}
+#endif
 	if (flags & ~(SOCK_CLOEXEC | SOCK_NONBLOCK))
 		return -EINVAL;
 
@@ -1683,6 +1725,12 @@ SYSCALL_DEFINE6(recvfrom, int, fd, void
 	int err, err2;
 	int fput_needed;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		err = redirect_recvfrom(fd, ubuf, size, flags, addr, addr_len);
+		return err;
+	}
+#endif
 	err = import_single_range(READ, ubuf, size, &iov, &msg.msg_iter);
 	if (unlikely(err))
 		return err;
@@ -1738,6 +1786,15 @@ SYSCALL_DEFINE5(setsockopt, int, fd, int
 	if (optlen < 0)
 		return -EINVAL;
 
+#ifdef CONFIG_POPCORN
+	/* We want to redirect setsockopt back to origin */
+	if (distributed_remote_process(current)) {
+		err = redirect_setsockopt(fd, level, optname, optval,
+					     optlen);
+		SSPRINTK("setsockopt ret: %d\n", err);
+		return err;
+	}
+#endif
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock != NULL) {
 		err = security_socket_setsockopt(sock, level, optname);
@@ -1798,6 +1855,12 @@ SYSCALL_DEFINE2(shutdown, int, fd, int,
 	int err, fput_needed;
 	struct socket *sock;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		err = redirect_shutdown(fd, how);
+		return err;
+	}
+#endif
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock != NULL) {
 		err = security_socket_shutdown(sock, how);
