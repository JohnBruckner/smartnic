diff -uprN linux-4.4.137/include/linux/mm.h popcorn-kernel/include/linux/mm.h
--- linux-4.4.137/include/linux/mm.h	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/include/linux/mm.h	2020-03-30 16:06:52.482727845 -0400
@@ -158,6 +158,10 @@ extern unsigned int kobjsize(const void
 #define VM_NOHUGEPAGE	0x40000000	/* MADV_NOHUGEPAGE marked this vma */
 #define VM_MERGEABLE	0x80000000	/* KSM may merge identical pages */
 
+#ifdef CONFIG_POPCORN
+#define VM_FETCH_LOCAL	0x00800000
+#endif
+
 #if defined(CONFIG_X86)
 # define VM_PAT		VM_ARCH_1	/* PAT reserves whole VMA at once (x86) */
 #elif defined(CONFIG_PPC)
@@ -1039,6 +1043,11 @@ static inline void clear_page_pfmemalloc
 
 #define VM_FAULT_HWPOISON_LARGE_MASK 0xf000 /* encodes hpage index for large hwpoison */
 
+#ifdef CONFIG_POPCORN
+#define VM_FAULT_CONTINUE	0x1000
+#define VM_FAULT_KILLED		0x2000
+#endif
+
 #define VM_FAULT_ERROR	(VM_FAULT_OOM | VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV | \
 			 VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE | \
 			 VM_FAULT_FALLBACK)
diff -uprN linux-4.4.137/include/linux/mm_types.h popcorn-kernel/include/linux/mm_types.h
--- linux-4.4.137/include/linux/mm_types.h	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/include/linux/mm_types.h	2020-03-30 16:06:52.482727845 -0400
@@ -15,6 +15,10 @@
 #include <asm/page.h>
 #include <asm/mmu.h>
 
+#ifdef CONFIG_POPCORN
+struct remote_context;
+#endif
+
 #ifndef AT_VECTOR_SIZE_ARCH
 #define AT_VECTOR_SIZE_ARCH 0
 #endif
@@ -516,6 +520,10 @@ struct mm_struct {
 #ifdef CONFIG_HUGETLB_PAGE
 	atomic_long_t hugetlb_usage;
 #endif
+
+#ifdef CONFIG_POPCORN
+	struct remote_context *remote;
+#endif
 };
 
 static inline void mm_init_cpumask(struct mm_struct *mm)
diff -uprN linux-4.4.137/include/linux/sched.h popcorn-kernel/include/linux/sched.h
--- linux-4.4.137/include/linux/sched.h	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/include/linux/sched.h	2020-03-30 16:06:52.514727779 -0400
@@ -1831,6 +1831,42 @@ struct task_struct {
 	unsigned long	task_state_change;
 #endif
 	int pagefault_disabled;
+
+#ifdef CONFIG_POPCORN
+	struct remote_context *remote;
+	union {
+		int peer_nid;
+		int remote_nid;
+		int origin_nid;
+	};
+	union {
+		pid_t peer_pid;
+		pid_t remote_pid;
+		pid_t origin_pid;
+	};
+
+	bool is_worker;			/* kernel thread that manages the process*/
+	bool at_remote;			/* Is executing on behalf of another node? */
+
+	volatile void *remote_work;
+	struct completion remote_work_pended;
+
+	int migration_target_nid;
+	int backoff_weight;
+
+#ifdef CONFIG_POPCORN_STAT_PGFAULTS
+	unsigned long fault_address;
+	int fault_retry;
+	ktime_t fault_start;
+#endif
+
+	/*
+	 * scheduling -- antoniob
+	 * in jiffies for load accounting
+	 */
+	unsigned long lutime, lstime, llasttimestamp;
+#endif
+
 /* CPU-specific state of this task */
 	struct thread_struct thread;
 /*
diff -uprN linux-4.4.137/include/linux/syscalls.h popcorn-kernel/include/linux/syscalls.h
--- linux-4.4.137/include/linux/syscalls.h	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/include/linux/syscalls.h	2020-03-30 16:06:52.522727763 -0400
@@ -889,4 +889,11 @@ asmlinkage long sys_membarrier(int cmd,
 
 asmlinkage long sys_mlock2(unsigned long start, size_t len, int flags);
 
+struct popcorn_thread_status;
+struct popcorn_node_info;
+asmlinkage long sys_popcorn_migrate(int nid, void __user *uregs);
+asmlinkage long sys_popcorn_propose_migration(pid_t pid, int nid);
+asmlinkage long sys_popcorn_get_thread_status(struct popcorn_thread_status __user *status);
+asmlinkage long sys_popcorn_get_node_info(int * __user _my_nid, struct popcorn_node_info __user *info);
+
 #endif
diff -uprN linux-4.4.137/include/popcorn/bundle.h popcorn-kernel/include/popcorn/bundle.h
--- linux-4.4.137/include/popcorn/bundle.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/bundle.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,42 @@
+#ifndef __POPCORN_RACK_H__
+#define __POPCORN_RACK_H__
+
+#define MAX_POPCORN_NODES 32
+#if (MAX_POPCORN_NODES > 62)
+#error Currently support up to 62 nodes
+#endif
+
+enum popcorn_arch {
+	POPCORN_ARCH_UNKNOWN = -1,
+	POPCORN_ARCH_ARM = 0,
+	POPCORN_ARCH_X86 = 1,
+	POPCORN_ARCH_PPC = 2,
+	POPCORN_ARCH_MAX,
+};
+
+extern int my_nid;
+extern const enum popcorn_arch my_arch;
+
+bool get_popcorn_node_online(int nid);
+void set_popcorn_node_online(int nid, bool online);
+
+int get_popcorn_node_arch(int nid);
+
+void broadcast_my_node_info(int nr_nodes);
+
+int popcorn_nodes_init(void);
+
+struct popcorn_thread_status {
+	int current_nid;
+	int proposed_nid;
+	int peer_nid;
+	pid_t peer_pid;
+};
+
+struct popcorn_node_info {
+	unsigned int status;
+	int arch;
+	int distance;
+};
+
+#endif
diff -uprN linux-4.4.137/include/popcorn/cpuinfo.h popcorn-kernel/include/popcorn/cpuinfo.h
--- linux-4.4.137/include/popcorn/cpuinfo.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/cpuinfo.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,96 @@
+/*
+ * File:
+ *  cpuinfo.c
+ *
+ * Description:
+ * 	Provides the architecture specific functionality of populating cpuinfo
+ *
+ * Created on:
+ * 	Oct 10, 2014
+ *
+ * Author:
+ *  Akshay Giridhar, SSRG, Virginia Tech
+ *  Antonio Barbalace, SSRG, Virginia Tech
+ *  Sharath Kumar Bhat, SSRG, Virginia Tech
+ *  Sang-Hoon Kim, SSRG, Virginia Tech
+ */
+
+#ifndef _LINUX_POPCORN_CPUINFO_H
+#define _LINUX_POPCORN_CPUINFO_H
+
+#define MAX_ARM_CORES 128
+#define MAX_X86_CORES 32
+
+#include <popcorn/bundle.h>
+
+/* For x86_64 cores */
+struct percore_info_x86 {
+	unsigned int processor;
+	char vendor_id[16];
+	int cpu_family;
+	unsigned int model;
+	char model_name[64];
+	int stepping;
+	unsigned long microcode;
+	unsigned cpu_freq;
+	int cache_size;
+	char fpu[3];
+	char fpu_exception[3];
+	int cpuid_level;
+	char wp[3];
+	char flags[640];
+	unsigned long nbogomips;
+	int TLB_size;
+	unsigned int clflush_size;
+	int cache_alignment;
+	unsigned int bits_physical;
+	unsigned int bits_virtual;
+	char power_management[64];
+};
+
+struct cpuinfo_arch_x86 {
+	unsigned int num_cpus;
+	struct percore_info_x86 cores[MAX_X86_CORES];
+};
+
+
+/* For arm64 cores */
+struct percore_info_arm64 {
+	unsigned int processor_id;
+	bool compat;
+	char model_name[64];
+	int model_rev;
+	char model_elf[8];
+	unsigned long bogo_mips;
+	unsigned long bogo_mips_fraction;
+	char flags[64];
+	unsigned int cpu_implementer;
+	unsigned int cpu_archtecture;
+	unsigned int cpu_variant;
+	unsigned int cpu_part;
+	unsigned int cpu_revision;
+};
+
+struct cpuinfo_arch_arm64 {
+	unsigned int num_cpus;
+	struct percore_info_arm64 cores[MAX_ARM_CORES];
+};
+
+
+struct remote_cpu_info {
+	enum popcorn_arch arch_type;
+	union {
+		struct cpuinfo_arch_x86 x86;
+		struct cpuinfo_arch_arm64 arm64;
+	};
+};
+
+
+struct seq_file;
+
+extern int fill_cpu_info(struct remote_cpu_info *res);
+extern void send_remote_cpu_info_request(unsigned int nid);
+extern unsigned int get_number_cpus_from_remote_node(unsigned int nid);
+extern int remote_proc_cpu_info(struct seq_file *m, unsigned int nid, unsigned int vpos);
+
+#endif
diff -uprN linux-4.4.137/include/popcorn/debug.h popcorn-kernel/include/popcorn/debug.h
--- linux-4.4.137/include/popcorn/debug.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/debug.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,50 @@
+#ifndef __INCLUDE_POPCORN_DEBUG_H__
+#define __INCLUDE_POPCORN_DEBUG_H__
+
+#define PCNPRINTK(...) printk(KERN_INFO "popcorn: " __VA_ARGS__)
+#define PCNPRINTK_ERR(...) printk(KERN_ERR "popcorn: " __VA_ARGS__)
+
+/*
+ * Function macros
+ */
+#ifdef CONFIG_POPCORN_DEBUG
+#define PRINTK(...) printk(KERN_INFO __VA_ARGS__)
+#else
+#define PRINTK(...)
+#endif
+
+
+#ifdef CONFIG_POPCORN_DEBUG_PROCESS_SERVER
+#define PSPRINTK(...) printk(KERN_INFO __VA_ARGS__)
+#else
+#define PSPRINTK(...)
+#endif
+
+
+#ifdef CONFIG_POPCORN_DEBUG_VMA_SERVER
+#define VSPRINTK(...) printk(KERN_INFO __VA_ARGS__)
+#else
+#define VSPRINTK(...)
+#endif
+
+
+#ifdef CONFIG_POPCORN_DEBUG_PAGE_SERVER
+#define PGPRINTK(...) printk(KERN_INFO __VA_ARGS__)
+#else
+#define PGPRINTK(...)
+#endif
+
+
+#ifdef CONFIG_POPCORN_DEBUG_MSG_LAYER
+#define MSGPRINTK(...) printk(KERN_INFO __VA_ARGS__)
+#else
+#define MSGPRINTK(...)
+#endif
+
+#ifdef CONFIG_POPCORN_DEBUG_SYSCALL_SERVER
+#define SSPRINTK(...) printk(KERN_INFO __VA_ARGS__)
+#else
+#define SSPRINTK(...)
+#endif
+
+#endif /*  __INCLUDE_POPCORN_DEBUG_H__ */
diff -uprN linux-4.4.137/include/popcorn/page_server.h popcorn-kernel/include/popcorn/page_server.h
--- linux-4.4.137/include/popcorn/page_server.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/page_server.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,44 @@
+/**
+ * @file page_server.h
+ * (public interface)
+ *
+ * Popcorn Linux page server public interface
+ * This work is an extension of Marina Sadini MS Thesis, plese refer to the
+ * Thesis for further information about the algorithm.
+ *
+ * @author Sang-Hoon Kim, SSRG Virginia Tech 2017
+ * @author Antonio Barbalace, SSRG Virginia Tech 2016
+ */
+
+#ifndef INCLUDE_POPCORN_PAGE_SERVER_H_
+#define INCLUDE_POPCORN_PAGE_SERVER_H_
+
+struct fault_handle;
+
+/*
+ * Entry points for dealing with page fault in Popcorn Rack
+ */
+int page_server_handle_pte_fault(
+		struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pmd_t *pmd, pte_t *pte, pte_t entry,
+		unsigned int flags);
+
+/*
+ * Flush pages in remote to the origin
+ */
+int page_server_flush_remote_pages(void);
+
+void page_server_zap_pte(
+	struct vm_area_struct *vma, unsigned long addr, pte_t *pte, pte_t *pteval);
+
+int page_server_get_userpage(u32 __user *uaddr, struct fault_handle **handle, char *mode);
+void page_server_put_userpage(struct fault_handle *fh, char *mode);
+
+void page_server_start_mm_fault(unsigned long address);
+int page_server_end_mm_fault(int ret);
+
+void page_server_panic(bool condition, struct mm_struct *mm, unsigned long address, pte_t *pte, pte_t pte_val);
+
+int page_server_release_page_ownership(struct vm_area_struct *vma, unsigned long addr);
+
+#endif /* INCLUDE_POPCORN_PAGE_SERVER_H_ */
diff -uprN linux-4.4.137/include/popcorn/pcn_kmsg.h popcorn-kernel/include/popcorn/pcn_kmsg.h
--- linux-4.4.137/include/popcorn/pcn_kmsg.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/pcn_kmsg.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,217 @@
+/**
+ * Header file for Popcorn inter-kernel messaging layer
+ *
+ * (C) Ben Shelton   <beshelto@vt.edu> 2013
+ *     Sang-Hoon Kim <sanghoon@vt.edu> 2017-2018
+ */
+
+#ifndef __POPCORN_PCN_KMSG_H__
+#define __POPCORN_PCN_KMSG_H__
+
+#include <linux/types.h>
+#include <linux/seq_file.h>
+
+/* Enumerate message types */
+enum pcn_kmsg_type {
+	/* Thread migration */
+	PCN_KMSG_TYPE_NODE_INFO,
+	PCN_KMSG_TYPE_STAT_START,
+	PCN_KMSG_TYPE_TASK_MIGRATE,
+	PCN_KMSG_TYPE_TASK_MIGRATE_BACK,
+	PCN_KMSG_TYPE_TASK_PAIRING,
+	PCN_KMSG_TYPE_TASK_EXIT_ORIGIN,
+	PCN_KMSG_TYPE_TASK_EXIT_REMOTE,
+
+	/* VMA synchronization */
+	PCN_KMSG_TYPE_VMA_INFO_REQUEST,
+	PCN_KMSG_TYPE_VMA_INFO_RESPONSE,
+	PCN_KMSG_TYPE_VMA_OP_REQUEST,
+	PCN_KMSG_TYPE_VMA_OP_RESPONSE,
+
+	/* Page consistency protocol */
+	PCN_KMSG_TYPE_REMOTE_PAGE_REQUEST,
+	PCN_KMSG_TYPE_REMOTE_PAGE_RESPONSE,
+	PCN_KMSG_TYPE_REMOTE_PAGE_RESPONSE_SHORT,
+	PCN_KMSG_TYPE_PAGE_INVALIDATE_REQUEST,
+	PCN_KMSG_TYPE_PAGE_INVALIDATE_RESPONSE,
+	PCN_KMSG_TYPE_REMOTE_PAGE_FLUSH,	/* XXX page flush is not working now */
+	PCN_KMSG_TYPE_REMOTE_PAGE_RELEASE,
+	PCN_KMSG_TYPE_REMOTE_PAGE_FLUSH_ACK,
+
+	/* Distributed futex */
+	PCN_KMSG_TYPE_FUTEX_REQUEST,
+	PCN_KMSG_TYPE_FUTEX_RESPONSE,
+	PCN_KMSG_TYPE_STAT_END,
+
+	/* Performance experiments */
+	PCN_KMSG_TYPE_TEST_REQUEST,
+	PCN_KMSG_TYPE_TEST_RESPONSE,
+	PCN_KMSG_TYPE_TEST_RDMA_REQUEST,
+	PCN_KMSG_TYPE_TEST_RDMA_RESPONSE,
+
+	/* Provide the single system image */
+	PCN_KMSG_TYPE_REMOTE_PROC_CPUINFO_REQUEST,
+	PCN_KMSG_TYPE_REMOTE_PROC_CPUINFO_RESPONSE,
+	PCN_KMSG_TYPE_REMOTE_PROC_MEMINFO_REQUEST,
+	PCN_KMSG_TYPE_REMOTE_PROC_MEMINFO_RESPONSE,
+	PCN_KMSG_TYPE_REMOTE_PROC_PS_REQUEST,
+	PCN_KMSG_TYPE_REMOTE_PROC_PS_RESPONSE,
+
+	/* Schedule server */
+	PCN_KMSG_TYPE_SCHED_PERIODIC,		/* XXX sched requires help!! */
+
+	/* Popcorn socket redirection */
+	PCN_KMSG_TYPE_REMOTE_SOCKET,
+	PCN_KMSG_TYPE_REMOTE_SETSOCKOPT,
+	PCN_KMSG_TYPE_REMOTE_SOCKET_RESPONSE,
+	PCN_KMSG_TYPE_REMOTE_BIND,
+	PCN_KMSG_TYPE_REMOTE_LISTEN,
+	PCN_KMSG_TYPE_REMOTE_ACCEPT4,
+
+	PCN_KMSG_TYPE_SYSCALL_FWD,
+	PCN_KMSG_TYPE_SYSCALL_REP,
+	PCN_KMSG_TYPE_MAX
+};
+
+/* Enumerate message priority. XXX Priority is not supported yet. */
+enum pcn_kmsg_prio {
+	PCN_KMSG_PRIO_LOW,
+	PCN_KMSG_PRIO_NORMAL,
+	PCN_KMSG_PRIO_HIGH,
+};
+
+/* Message header */
+struct pcn_kmsg_hdr {
+	int from_nid			:6;
+	enum pcn_kmsg_prio prio	:2;
+	enum pcn_kmsg_type type	:8;
+	size_t size;
+} __attribute__((packed));
+
+#define PCN_KMSG_FROM_NID(x) \
+	(((struct pcn_kmsg_message *)x)->header.from_nid)
+#define PCN_KMSG_SIZE(x) (sizeof(struct pcn_kmsg_hdr) + x)
+
+#define PCN_KMSG_MAX_SIZE (64UL << 10)
+#define PCN_KMSG_MAX_PAYLOAD_SIZE \
+	(PCN_KMSG_MAX_SIZE - sizeof(struct pcn_kmsg_hdr))
+
+
+#define DEFINE_PCN_KMSG(type, fields) \
+	typedef struct {				\
+		struct pcn_kmsg_hdr header;	\
+		fields;				\
+	} __attribute__((packed)) type
+
+struct pcn_kmsg_message {
+	struct pcn_kmsg_hdr header;
+	unsigned char payload[PCN_KMSG_MAX_PAYLOAD_SIZE];
+} __attribute__((packed));
+
+void pcn_kmsg_dump(struct pcn_kmsg_message *msg);
+
+
+/* SETUP */
+
+/* Function pointer to callback functions */
+typedef int (*pcn_kmsg_cbftn)(struct pcn_kmsg_message *);
+
+/* Register a callback function to handle the message type */
+int pcn_kmsg_register_callback(enum pcn_kmsg_type type, pcn_kmsg_cbftn callback);
+
+/* Unregister a callback function for the message type */
+int pcn_kmsg_unregister_callback(enum pcn_kmsg_type type);
+
+
+/* MESSAGING */
+
+/**
+ * Send @msg whose size is @msg_size to the node @dest_nid.
+ * @msg is sent synchronously; it is safe to deallocate @msg after the return.
+ */
+int pcn_kmsg_send(enum pcn_kmsg_type type, int dest_nid, void *msg, size_t msg_size);
+
+/**
+ * Post @msg whose size is @msg_size to be sent to the node @dest_nid.
+ * The message should be allocated through pcn_kmsg_get(), and the message
+ * is reclaimed automatically once it is sent.
+ */
+int pcn_kmsg_post(enum pcn_kmsg_type type, int dest_nid, void *msg, size_t msg_size);
+
+/**
+ * Get message buffer for posting. Note pcn_kmsg_put() is for returning
+ * unused buffer without posting it; posted message is reclaimed automatically.
+ */
+void *pcn_kmsg_get(size_t size);
+void pcn_kmsg_put(void *msg);
+
+/**
+ * Process the received messag @msg. Each message layer should start processing
+ * the request by calling this function
+ */
+void pcn_kmsg_process(struct pcn_kmsg_message *msg);
+
+/**
+ * Return received message @msg after handling to recyle it. @msg becomes
+ * unavailable after the call. Make sure return received messages otherwise
+ * the message layer will panick.
+ */
+void pcn_kmsg_done(void *msg);
+
+/**
+ * Print out transport-specific statistics into @buffer
+ */
+void pcn_kmsg_stat(struct seq_file *seq, void *v);
+
+
+struct pcn_kmsg_rdma_handle {
+	u32 rkey;
+	void *addr;
+	dma_addr_t dma_addr;
+	void *private;
+};
+
+/**
+ * Pin @buffer for RDMA and get @rdma_addr and @rdma_key.
+ */
+struct pcn_kmsg_rdma_handle *pcn_kmsg_pin_rdma_buffer(void *buffer, size_t size);
+
+void pcn_kmsg_unpin_rdma_buffer(struct pcn_kmsg_rdma_handle *handle);
+
+int pcn_kmsg_rdma_write(int dest_nid, dma_addr_t rdma_addr, void *addr, size_t size, u32 rdma_key);
+
+int pcn_kmsg_rdma_read(int from_nid, void *addr, dma_addr_t rdma_addr, size_t size, u32 rdma_key);
+
+/* TRANSPORT DESCRIPTOR */
+enum {
+	PCN_KMSG_FEATURE_RDMA = 1,
+};
+
+/**
+ * Check the features that the transport layer provides. Return true iff all
+ * features are supported.
+ */
+bool pcn_kmsg_has_features(unsigned int features);
+
+struct pcn_kmsg_transport {
+	char *name;
+	unsigned long features;
+
+	struct pcn_kmsg_message *(*get)(size_t);
+	void (*put)(struct pcn_kmsg_message *);
+
+	int (*send)(int, struct pcn_kmsg_message *, size_t);
+	int (*post)(int, struct pcn_kmsg_message *, size_t);
+	void (*done)(struct pcn_kmsg_message *);
+
+	void (*stat)(struct seq_file *, void *);
+
+	struct pcn_kmsg_rdma_handle *(*pin_rdma_buffer)(void *, size_t);
+	void (*unpin_rdma_buffer)(struct pcn_kmsg_rdma_handle *);
+	int (*rdma_write)(int, dma_addr_t, void *, size_t, u32);
+	int (*rdma_read)(int, void *, dma_addr_t, size_t, u32);
+};
+
+void pcn_kmsg_set_transport(struct pcn_kmsg_transport *tr);
+
+#endif /* __POPCORN_PCN_KMSG_H__ */
diff -uprN linux-4.4.137/include/popcorn/process_server.h popcorn-kernel/include/popcorn/process_server.h
--- linux-4.4.137/include/popcorn/process_server.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/process_server.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,17 @@
+#ifndef __POPCORN_PROCESS_SERVER_H
+#define __POPCORN_PROCESS_SERVER_H
+
+struct task_struct;
+
+int process_server_do_migration(struct task_struct* tsk, unsigned int dst_nid, void __user *uregs);
+int process_server_task_exit(struct task_struct *tsk);
+int update_frame_pointer(void);
+
+long process_server_do_futex_at_remote(u32 __user *uaddr, int op, u32 val,
+		bool valid_ts, struct timespec *ts,
+		u32 __user *uaddr2, u32 val2, u32 val3);
+
+struct remote_context;
+void free_remote_context(struct remote_context *);
+
+#endif /* __POPCORN_PROCESS_SERVER_H */
diff -uprN linux-4.4.137/include/popcorn/regset.h popcorn-kernel/include/popcorn/regset.h
--- linux-4.4.137/include/popcorn/regset.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/regset.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,98 @@
+/*
+ * File:
+ * process_server_macros.h
+ *
+ * Description:
+ * 	this file provides the architecture specific macro and structures of the
+ *  helper functionality implementation of the process server
+ *
+ * Created on:
+ * 	Sep 19, 2014
+ *
+ * Author:
+ * 	Sharath Kumar Bhat, SSRG, VirginiaTech
+ *
+ */
+
+#ifndef PROCESS_SERVER_ARCH_MACROS_H_
+#define PROCESS_SERVER_ARCH_MACROS_H_
+
+#include <popcorn/bundle.h>
+
+struct regset_x86_64 {
+	/* Program counter/instruction pointer */
+	uint64_t rip;
+
+	/* General purpose registers */
+	uint64_t rax, rdx, rcx, rbx,
+			 rsi, rdi, rbp, rsp,
+			 r8, r9, r10, r11,
+			 r12, r13, r14, r15;
+
+	/* Multimedia-extension (MMX) registers */
+	uint64_t mmx[8];
+
+	/* Streaming SIMD Extension (SSE) registers */
+	unsigned __int128 xmm[16];
+
+	/* x87 floating point registers */
+	long double st[8];
+
+	/* Segment registers */
+	uint32_t cs, ss, ds, es, fs, gs;
+
+	/* Flag register */
+	uint64_t rflags;
+};
+
+struct regset_aarch64 {
+	/* Stack pointer & program counter */
+	uint64_t sp;
+	uint64_t pc;
+
+	/* General purpose registers */
+	uint64_t x[31];
+
+	/* FPU/SIMD registers */
+	unsigned __int128 v[32];
+};
+
+struct regset_powerpc {
+	unsigned long nip;
+	unsigned long msr;
+	unsigned long ctr;
+	unsigned long link;
+	unsigned long xer;
+	unsigned long ccr;
+
+	unsigned long gpr[32];
+	uint64_t fpr[32];
+
+	unsigned long orig_gpr3;	/* Used for restarting system calls */
+	unsigned long softe;		/* Soft enabled/disabled */
+};
+
+struct field_arch {
+	unsigned long tls;
+	unsigned long oob[4];
+	bool fpu_active;
+
+	union {
+		unsigned long regsets;
+		struct regset_x86_64 regs_x86;
+		struct regset_aarch64 regs_aarch;
+		struct regset_powerpc regs_ppc;
+	};
+};
+
+static inline size_t regset_size(int arch) {
+	const size_t sizes[] = {
+		sizeof(struct regset_aarch64),
+		sizeof(struct regset_x86_64),
+		sizeof(struct regset_powerpc),
+	};
+	BUG_ON(arch <= POPCORN_ARCH_UNKNOWN || arch >= POPCORN_ARCH_MAX);
+	return sizes[arch];
+}
+
+#endif
diff -uprN linux-4.4.137/include/popcorn/remote_meminfo.h popcorn-kernel/include/popcorn/remote_meminfo.h
--- linux-4.4.137/include/popcorn/remote_meminfo.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/remote_meminfo.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,62 @@
+#ifndef _LINUX_POPCORN_REMOTE_MEMINFO_H
+#define _LINUX_POPCORN_REMOTE_MEMINFO_H
+
+#include <popcorn/pcn_kmsg.h>
+
+#define REMOTE_MEMINFO_REQUEST_FIELDS \
+	int nid; \
+	int origin_ws;
+DEFINE_PCN_KMSG(remote_mem_info_request_t, REMOTE_MEMINFO_REQUEST_FIELDS);
+
+#define REMOTE_MEMINFO_RESPONSE_FIELDS \
+	int nid; \
+	int origin_ws; \
+	unsigned long MemTotal; \
+	unsigned long MemFree; \
+	unsigned long MemAvailable; \
+	unsigned long Buffers; \
+	unsigned long Cached; \
+	unsigned long SwapCached; \
+	unsigned long Active; \
+	unsigned long Inactive; \
+	unsigned long Active_anon; \
+	unsigned long Inactive_anon; \
+	unsigned long Active_file; \
+	unsigned long Inactive_file; \
+	unsigned long Unevictable; \
+	unsigned long Mlocked; \
+	unsigned long HighTotal; \
+	unsigned long HighFree; \
+	unsigned long LowTotal; \
+	unsigned long LowFree; \
+	unsigned long MmapCopy; \
+	unsigned long SwapTotal; \
+	unsigned long SwapFree; \
+	unsigned long Dirty; \
+	unsigned long Writeback; \
+	unsigned long AnonPages; \
+	unsigned long Mapped; \
+	unsigned long Shmem; \
+	unsigned long Slab; \
+	unsigned long SReclaimable; \
+	unsigned long SUnreclaim; \
+	unsigned long KernelStack; \
+	unsigned long PageTables; \
+	unsigned long Quicklists; \
+	unsigned long NFS_Unstable; \
+	unsigned long Bounce; \
+	unsigned long WritebackTmp; \
+	unsigned long CommitLimit; \
+	unsigned long Committed_AS; \
+	unsigned long VmallocTotal; \
+	unsigned long VmallocUsed; \
+	unsigned long VmallocChunk; \
+	unsigned long HardwareCorrupted; \
+	unsigned long AnonHugePages; \
+	unsigned long CmaTotal; \
+	unsigned long CmaFree;
+DEFINE_PCN_KMSG(remote_mem_info_response_t, REMOTE_MEMINFO_RESPONSE_FIELDS);
+
+int remote_proc_mem_info(remote_mem_info_response_t *total);
+
+#endif
diff -uprN linux-4.4.137/include/popcorn/stat.h popcorn-kernel/include/popcorn/stat.h
--- linux-4.4.137/include/popcorn/stat.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/stat.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,22 @@
+/*
+ * stat.h
+ *
+ *  Created on: May 22, 2017
+ *      Author: Sang-Hoon Kim (sanghoon@vt.edu)
+ */
+
+#ifndef __KERNEL_POPCORN_STAT_H__
+#define __KERNEL_POPCORN_STAT_H__
+
+struct pcn_kmsg_message;
+
+void account_pcn_message_sent(struct pcn_kmsg_message *msg);
+void account_pcn_message_recv(struct pcn_kmsg_message *msg);
+
+void account_pcn_rdma_write(size_t size);
+void account_pcn_rdma_read(size_t size);
+
+#define POPCORN_STAT_FMT  "%12llu  %12llu  %s\n"
+#define POPCORN_STAT_FMT2 "%8llu.%03llu  %8llu.%03llu  %s\n"
+
+#endif /* KERNEL_POPCORN_STAT_H_ */
diff -uprN linux-4.4.137/include/popcorn/syscall_server.h popcorn-kernel/include/popcorn/syscall_server.h
--- linux-4.4.137/include/popcorn/syscall_server.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/syscall_server.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,41 @@
+#ifndef __KERNEL_POPCORN_REMOTE_SOCKET_H__
+#define __KERNEL_POPCORN_REMOTE_SOCKET_H__
+
+
+int redirect_socket(int family, int type, int protocol);
+int redirect_setsockopt(int fd, int level, int optname, char __user * optval,
+			int optlen);
+int redirect_bind(int fd, struct sockaddr __user *umyaddr, int addrlen);
+int redirect_listen(int fd, int backlog);
+int redirect_accept4(int fd, struct sockaddr __user *upeer_sockaddr,
+		     int __user *upeer_addrlen, int flag);
+long redirect_shutdown(int, int);
+long redirect_recvfrom(int, void __user *, size_t, unsigned,
+				struct sockaddr __user *, int __user *);
+
+long redirect_epoll_create1(int flags);
+long redirect_epoll_ctl(int epfd, int op, int fd,
+				struct epoll_event __user *event);
+long redirect_epoll_wait(int epfd, struct epoll_event __user *events,
+				int maxevents, int timeout);
+long redirect_epoll_pwait(int epfd, struct epoll_event __user *events,
+				int maxevents, int timeout,
+				const sigset_t __user *sigmask,
+				size_t sigsetsize);
+long redirect_select(int n, fd_set __user *inp, fd_set __user *outp,
+			fd_set __user *exp, struct timeval __user *tvp);
+
+long redirect_read(unsigned int fd, char __user *buf, size_t count);
+long redirect_write(unsigned int fd, const char __user *buf, size_t count);
+long redirect_open(const char __user *filename, int flags, umode_t mode);
+long redirect_close(unsigned int fd);
+long redirect_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
+long redirect_writev(unsigned long fd,
+			   const struct iovec __user *vec,
+			   unsigned long vlen);
+long redirect_fstat(unsigned int fd,
+			struct stat __user *statbuf);
+long redirect_sendfile64(int out_fd, int in_fd,
+			       loff_t __user *offset, size_t count);
+long redirect_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);
+#endif
diff -uprN linux-4.4.137/include/popcorn/types.h popcorn-kernel/include/popcorn/types.h
--- linux-4.4.137/include/popcorn/types.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/types.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,28 @@
+/**
+ * @file include/popcorn/types.h
+ *
+ * Define constant variables and define optional features
+ *
+ * @author Sang-Hoon Kim, SSRG Virginia Tech, 2017
+ * @author Marina Sadini, SSRG Virginia Tech, 2013
+ */
+
+#ifndef __INCLUDE_POPCORN_TYPES_H__
+#define __INCLUDE_POPCORN_TYPES_H__
+
+#include <linux/sched.h>
+
+static inline bool distributed_process(struct task_struct *tsk)
+{
+	if (!tsk->mm) return false;
+	return !!tsk->mm->remote;
+}
+
+static inline bool distributed_remote_process(struct task_struct *tsk)
+{
+	return distributed_process(tsk) && tsk->at_remote;
+}
+
+#include <popcorn/debug.h>
+
+#endif /* __INCLUDE_POPCORN_TYPES_H__ */
diff -uprN linux-4.4.137/include/popcorn/vma_server.h popcorn-kernel/include/popcorn/vma_server.h
--- linux-4.4.137/include/popcorn/vma_server.h	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/include/popcorn/vma_server.h	2020-03-30 16:06:52.562727680 -0400
@@ -0,0 +1,41 @@
+/**
+ * @file vma_server.h
+ * (public interface)
+ *
+ * Popcorn Linux VMA server public interface
+ * This work is an extension of David Katz MS Thesis, please refer to the
+ * Thesis for further information about the algorithm.
+ *
+ * @author Antonio Barbalace, SSRG Virginia Tech 2016
+ * @author Sang-Hoon Kim, SSRG Virginia Tech 2017.
+ */
+
+#ifndef INCLUDE_POPCORN_VMA_SERVER_H_
+#define INCLUDE_POPCORN_VMA_SERVER_H_
+
+
+/**
+ * VMA operation handlers for origin
+ */
+int vma_server_munmap_origin(unsigned long start, size_t len, int nid_except);
+
+
+/**
+ * Retrieve VMAs from origin
+ */
+int vma_server_fetch_vma(struct task_struct *tsk, unsigned long address);
+
+/**
+ * VMA operation handler for remote
+ */
+unsigned long vma_server_mmap_remote(struct file *file,
+		unsigned long addr, unsigned long len,
+		unsigned long prot, unsigned long flags, unsigned long pgoff);
+int vma_server_munmap_remote(unsigned long start, size_t len);
+int vma_server_brk_remote(unsigned long oldbrk, unsigned long brk);
+int vma_server_madvise_remote(unsigned long start, size_t len, int behavior);
+int vma_server_mprotect_remote(unsigned long start, size_t len, unsigned long prot);
+int vma_server_mremap_remote(unsigned long addr, unsigned long old_len,
+		unsigned long new_len, unsigned long flags, unsigned long new_addr);
+
+#endif /* INCLUDE_POPCORN_VMA_SERVER_H_ */
diff -uprN linux-4.4.137/include/uapi/asm-generic/mman-common.h popcorn-kernel/include/uapi/asm-generic/mman-common.h
--- linux-4.4.137/include/uapi/asm-generic/mman-common.h	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/include/uapi/asm-generic/mman-common.h	2020-03-30 16:06:52.582727638 -0400
@@ -57,6 +57,10 @@
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_DONTDUMP flag */
 
+#ifdef CONFIG_POPCORN
+#define MADV_RELEASE 18
+#endif
+
 /* compatibility flags */
 #define MAP_FILE	0
 
diff -uprN linux-4.4.137/include/uapi/asm-generic/unistd.h popcorn-kernel/include/uapi/asm-generic/unistd.h
--- linux-4.4.137/include/uapi/asm-generic/unistd.h	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/include/uapi/asm-generic/unistd.h	2020-03-30 16:06:52.582727638 -0400
@@ -715,9 +715,16 @@ __SYSCALL(__NR_userfaultfd, sys_userfaul
 __SYSCALL(__NR_membarrier, sys_membarrier)
 #define __NR_mlock2 284
 __SYSCALL(__NR_mlock2, sys_mlock2)
-
+#define __NR_popcorn_migrate 285
+__SYSCALL(__NR_popcorn_migrate, sys_popcorn_migrate)
+#define __NR_popcorn_propose_migration 286
+__SYSCALL(__NR_popcorn_propose_migration, sys_popcorn_propose_migration)
+#define __NR_popcorn_get_thread_status 287
+__SYSCALL(__NR_popcorn_get_thread_status, sys_popcorn_get_thread_status)
+#define __NR_popcorn_get_node_info 288
+__SYSCALL(__NR_popcorn_get_node_info, sys_popcorn_get_node_info)
 #undef __NR_syscalls
-#define __NR_syscalls 285
+#define __NR_syscalls 289
 
 /*
  * All syscalls below here should go away really,
