diff -uprN linux-4.4.137/arch/arm64/include/asm/memory.h popcorn-kernel/arch/arm64/include/asm/memory.h
--- linux-4.4.137/arch/arm64/include/asm/memory.h	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/arch/arm64/include/asm/memory.h	2020-03-30 16:06:47.950737161 -0400
@@ -58,7 +58,12 @@
 #define PCI_IO_END		(MODULES_VADDR - SZ_2M)
 #define PCI_IO_START		(PCI_IO_END - PCI_IO_SIZE)
 #define FIXADDR_TOP		(PCI_IO_START - SZ_2M)
+#ifndef CONFIG_POPCORN
 #define TASK_SIZE_64		(UL(1) << VA_BITS)
+#else
+#include <asm/page.h>
+#define TASK_SIZE_64		((UL(1) << 47) - PAGE_SIZE)
+#endif
 
 #ifdef CONFIG_COMPAT
 #define TASK_SIZE_32		UL(0x100000000)
diff -uprN linux-4.4.137/arch/arm64/Kconfig popcorn-kernel/arch/arm64/Kconfig
--- linux-4.4.137/arch/arm64/Kconfig	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/arch/arm64/Kconfig	2020-03-30 16:06:47.942737177 -0400
@@ -93,6 +93,7 @@ config ARM64
 	select SPARSE_IRQ
 	select SYSCTL_EXCEPTION_TRACE
 	select HAVE_CONTEXT_TRACKING
+	select ARCH_SUPPORTS_POPCORN
 	help
 	  ARM 64-bit (AArch64) Linux support.
 
@@ -182,6 +183,8 @@ config PGTABLE_LEVELS
 
 source "init/Kconfig"
 
+source "kernel/Kconfig.popcorn"
+
 source "kernel/Kconfig.freezer"
 
 source "arch/arm64/Kconfig.platforms"
@@ -451,14 +454,14 @@ config ARM64_4K_PAGES
 	  This feature enables 4KB pages support.
 
 config ARM64_16K_PAGES
-	bool "16KB"
+	bool "16KB" if !POPCORN
 	help
 	  The system will use 16KB pages support. AArch32 emulation
 	  requires applications compiled with 16K (or a multiple of 16K)
 	  aligned segments.
 
 config ARM64_64K_PAGES
-	bool "64KB"
+	bool "64KB" if !POPCORN
 	help
 	  This feature enables 64KB pages support (4KB by default)
 	  allowing only two levels of page tables and faster TLB
@@ -472,6 +475,7 @@ choice
 	default ARM64_VA_BITS_39 if ARM64_4K_PAGES
 	default ARM64_VA_BITS_47 if ARM64_16K_PAGES
 	default ARM64_VA_BITS_42 if ARM64_64K_PAGES
+	default ARM64_VA_BITS_48 if POPCORN
 	help
 	  Allows choosing one of multiple possible virtual address
 	  space sizes. The level of translation table is determined by
@@ -479,19 +483,19 @@ choice
 
 config ARM64_VA_BITS_36
 	bool "36-bit" if EXPERT
-	depends on ARM64_16K_PAGES
+	depends on ARM64_16K_PAGES && !POPCORN
 
 config ARM64_VA_BITS_39
 	bool "39-bit"
-	depends on ARM64_4K_PAGES
+	depends on ARM64_4K_PAGES && !POPCORN
 
 config ARM64_VA_BITS_42
 	bool "42-bit"
-	depends on ARM64_64K_PAGES
+	depends on ARM64_64K_PAGES && !POPCORN
 
 config ARM64_VA_BITS_47
 	bool "47-bit"
-	depends on ARM64_16K_PAGES
+	depends on ARM64_16K_PAGES && !POPCORN
 
 config ARM64_VA_BITS_48
 	bool "48-bit"
diff -uprN linux-4.4.137/arch/arm64/kernel/cpuinfo.c popcorn-kernel/arch/arm64/kernel/cpuinfo.c
--- linux-4.4.137/arch/arm64/kernel/cpuinfo.c	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/arch/arm64/kernel/cpuinfo.c	2020-03-30 16:06:47.954737152 -0400
@@ -14,26 +14,31 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-#include <asm/arch_timer.h>
-#include <asm/cachetype.h>
-#include <asm/cpu.h>
-#include <asm/cputype.h>
-#include <asm/cpufeature.h>
 
 #include <linux/bitops.h>
-#include <linux/bug.h>
-#include <linux/compat.h>
 #include <linux/elf.h>
-#include <linux/init.h>
 #include <linux/kernel.h>
 #include <linux/personality.h>
-#include <linux/preempt.h>
-#include <linux/printk.h>
 #include <linux/seq_file.h>
-#include <linux/sched.h>
-#include <linux/smp.h>
 #include <linux/delay.h>
 
+#include <asm/cpu.h>
+
+#include <popcorn/cpuinfo.h>
+
+static struct cpu_global_info {
+	unsigned int remote;
+	unsigned int vpos;
+	unsigned int nid;
+} cpu_global_info;
+
+/*
+ * num_cpus: # of cores of each nodes
+ * num_total_cpus: # of total cpus of all connected nodes
+ */
+static unsigned int num_cpus[MAX_POPCORN_NODES];
+static unsigned int num_total_cpus;
+
 /*
  * In case the boot CPU is hotpluggable, we record its initial state and
  * current state separately. Certain system registers may contain different
@@ -101,7 +106,7 @@ static const char *const compat_hwcap2_s
 };
 #endif /* CONFIG_COMPAT */
 
-static int c_show(struct seq_file *m, void *v)
+static int c_show_arm64(struct seq_file *m, void *v)
 {
 	int i, j;
 	bool compat = personality(current->personality) == PER_LINUX32;
@@ -159,9 +164,97 @@ static int c_show(struct seq_file *m, vo
 	return 0;
 }
 
+static void calc_nid_vpos(loff_t *pos, unsigned int *pnid, unsigned int *vpos)
+{
+	int i = 0;
+
+	*pnid = 0;
+	*vpos = 0;
+
+	for (i = 1; i <= num_total_cpus; i++) {
+		if ((*pnid) == my_nid)
+			(*pnid)++;
+
+		if ((*vpos) == num_cpus[*pnid]) {
+			*vpos = 0;
+			(*pnid)++;
+		}
+
+		if (i == (*pos))
+			break;
+
+		(*vpos)++;
+	}
+}
+
 static void *c_start(struct seq_file *m, loff_t *pos)
 {
-	return *pos < 1 ? (void *)1 : NULL;
+	unsigned int vpos = 0;
+	unsigned int nid = 0;
+
+	if (my_nid == -1 || (*pos) == 0)
+		goto local;
+
+	if ((*pos) == 1) {
+		int i = 0;
+		int j = 0;
+		bool connected = false;
+
+		/* Check the connection with remote nodes */
+		for (i = 0; i < MAX_POPCORN_NODES; i++) {
+			if (get_popcorn_node_online(i)) {
+				connected = true;
+				break;
+			}
+		}
+
+		if (connected == false) {
+			/* No connection */
+			goto local;
+		} else {
+			/* Connection with remote nodes */
+			for (i = 0; i < MAX_POPCORN_NODES; i++) {
+				if (i == my_nid) {
+					num_cpus[i] = 1;
+					j = j + 1;
+					continue;
+				}
+				if (get_popcorn_node_online(i)) {
+					send_remote_cpu_info_request(i);
+					num_cpus[i] = get_number_cpus_from_remote_node(i);
+					j = j + num_cpus[i];
+				} else {
+					num_cpus[i] = 0;
+				}
+			}
+
+			num_total_cpus = j;
+			goto remote;
+		}
+	} else if ((*pos) > 1) {
+		goto remote;
+	}
+local:
+	if ((*pos) < 1) {
+		cpu_global_info.remote = 0;
+
+		return &cpu_global_info;
+	}
+
+	return NULL;
+
+remote:
+	if ((*pos) < num_total_cpus) {
+		calc_nid_vpos(pos, &nid, &vpos);
+
+		cpu_global_info.remote = 1;
+		cpu_global_info.vpos = vpos;
+		cpu_global_info.nid = nid;
+
+		return &cpu_global_info;
+	}
+
+	return NULL;
 }
 
 static void *c_next(struct seq_file *m, void *v, loff_t *pos)
@@ -174,6 +267,19 @@ static void c_stop(struct seq_file *m, v
 {
 }
 
+static int c_show(struct seq_file *m, void *v)
+{
+	struct cpu_global_info *cpu_global_info = v;
+
+	if (cpu_global_info->remote == 1) {
+		remote_proc_cpu_info(m, cpu_global_info->nid, cpu_global_info->vpos);
+	} else {
+		c_show_arm64(m, v);
+	}
+
+	return 0;
+}
+
 const struct seq_operations cpuinfo_op = {
 	.start	= c_start,
 	.next	= c_next,
diff -uprN linux-4.4.137/arch/arm64/kernel/cpuinfo_popcorn.c popcorn-kernel/arch/arm64/kernel/cpuinfo_popcorn.c
--- linux-4.4.137/arch/arm64/kernel/cpuinfo_popcorn.c	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/arch/arm64/kernel/cpuinfo_popcorn.c	2020-03-30 16:06:47.954737152 -0400
@@ -0,0 +1,140 @@
+/**
+ * @file cpuinfo_popcorn.c
+ *
+ * Popcorn Linux ARM64 cpuinfo implementation
+ * This work is a rework of Ajithchandra Saya's implementation
+ * to provide the ARM64 specific information for remote cpuinfo.
+ * The original implementation was based on the custom Linux kernel
+ * for the X-Gene, but, the current implementation is based on
+ * the vanilla Linux kernel.
+ *
+ * @author Ajithchandra Saya, SSRG, VirginiaTech 2014
+ * @author Jingoo Han, SSRG Virginia Tech 2017
+ */
+
+#include <asm/cpu.h>
+
+#include <linux/kernel.h>
+#include <linux/cpu.h>
+#include <linux/delay.h>
+#include <linux/elf.h>
+#include <linux/personality.h>
+
+#include <popcorn/cpuinfo.h>
+#include <popcorn/pcn_kmsg.h>
+
+static const char *const hwcap_str[] = {
+	"fp",
+	"asimd",
+	"evtstrm",
+	"aes",
+	"pmull",
+	"sha1",
+	"sha2",
+	"crc32",
+	"atomics",
+	NULL
+};
+
+#ifdef CONFIG_COMPAT
+static const char *const compat_hwcap_str[] = {
+	"swp",
+	"half",
+	"thumb",
+	"26bit",
+	"fastmult",
+	"fpa",
+	"vfp",
+	"edsp",
+	"java",
+	"iwmmxt",
+	"crunch",
+	"thumbee",
+	"neon",
+	"vfpv3",
+	"vfpv3d16",
+	"tls",
+	"vfpv4",
+	"idiva",
+	"idivt",
+	"vfpd32",
+	"lpae",
+	"evtstrm",
+	NULL
+};
+
+static const char *const compat_hwcap2_str[] = {
+	"aes",
+	"pmull",
+	"sha1",
+	"sha2",
+	"crc32",
+	NULL
+};
+#endif /* CONFIG_COMPAT */
+
+int fill_cpu_info(struct remote_cpu_info *res)
+{
+	int i, j;
+	bool compat = personality(current->personality) == PER_LINUX32;
+	unsigned int count = 0;
+	struct cpuinfo_arch_arm64 *arch = &res->arm64;
+
+	res->arch_type = POPCORN_ARCH_ARM;
+
+	for_each_online_cpu(i) {
+		struct cpuinfo_arm64 *cpuinfo = &per_cpu(cpu_data, i);
+		struct percore_info_arm64 *core = &arch->cores[count];
+		u32 midr = cpuinfo->reg_midr;
+
+#ifdef CONFIG_SMP
+		core->processor_id = i;
+#endif
+		strcpy(core->model_name, "ARMv8 Processor");
+		core->compat = compat;
+		if (compat) {
+			core->model_rev = MIDR_REVISION(midr);
+			strcpy(core->model_elf, COMPAT_ELF_PLATFORM);
+		}
+
+		core->bogo_mips = loops_per_jiffy / (500000UL/HZ);
+		core->bogo_mips_fraction = loops_per_jiffy / (5000UL/HZ) % 100;
+
+		strcpy(core->flags, "");
+		if (compat) {
+#ifdef CONFIG_COMPAT
+			for (j = 0; compat_hwcap_str[j]; j++) {
+				if (compat_elf_hwcap & (1 << j)) {
+					strcat(core->flags, compat_hwcap_str[j]);
+					strcat(core->flags, " ");
+				}
+			}
+
+			for (j = 0; compat_hwcap2_str[j]; j++) {
+				if (compat_elf_hwcap2 & (1 << j)) {
+					strcat(core->flags, compat_hwcap2_str[j]);
+					strcat(core->flags, " ");
+				}
+			}
+#endif /* CONFIG_COMPAT */
+		} else {
+			for (j = 0; hwcap_str[j]; j++) {
+				if (elf_hwcap & (1 << j)) {
+					strcat(core->flags, hwcap_str[j]);
+					strcat(core->flags, " ");
+				}
+			}
+		}
+
+		core->cpu_implementer = MIDR_IMPLEMENTOR(midr);
+		core->cpu_archtecture = 8;
+		core->cpu_variant = MIDR_VARIANT(midr);
+		core->cpu_part = MIDR_PARTNUM(midr);
+		core->cpu_revision = MIDR_REVISION(midr);
+
+		count++;
+	}
+	arch->num_cpus = count;
+
+	return 0;
+}
diff -uprN linux-4.4.137/arch/arm64/kernel/Makefile popcorn-kernel/arch/arm64/kernel/Makefile
--- linux-4.4.137/arch/arm64/kernel/Makefile	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/arch/arm64/kernel/Makefile	2020-03-30 16:06:47.950737161 -0400
@@ -42,6 +42,8 @@ arm64-obj-$(CONFIG_PCI)			+= pci.o
 arm64-obj-$(CONFIG_ARMV8_DEPRECATED)	+= armv8_deprecated.o
 arm64-obj-$(CONFIG_ACPI)		+= acpi.o
 
+obj-$(CONFIG_POPCORN)		+= cpuinfo_popcorn.o process_server.o
+
 obj-y					+= $(arm64-obj-y) vdso/
 obj-m					+= $(arm64-obj-m)
 head-y					:= head.o
diff -uprN linux-4.4.137/arch/arm64/kernel/process_server.c popcorn-kernel/arch/arm64/kernel/process_server.c
--- linux-4.4.137/arch/arm64/kernel/process_server.c	1969-12-31 19:00:00.000000000 -0500
+++ popcorn-kernel/arch/arm64/kernel/process_server.c	2020-03-30 16:06:47.954737152 -0400
@@ -0,0 +1,199 @@
+/*
+ * File:
+ * 	process_server.c
+ *
+ * Description:
+ * 	Helper functionality of the process server
+ *
+ * Created on:
+ * 	Sep 19, 2014
+ *
+ * Author:
+ * 	Ajithchandra Saya, SSRG, VirginiaTech
+ * 	Sang-Hoon Kim, SSRG, Virginia Tech
+ *
+ */
+
+/* File includes */
+#include <linux/sched.h>
+#include <linux/uaccess.h>
+#include <linux/ptrace.h>
+
+#include <asm/compat.h>
+#include <asm/fpsimd.h>
+
+#include <popcorn/regset.h>
+#include <popcorn/debug.h>
+
+/*
+ * Function:
+ *		save_thread_info
+ *
+ * Description:
+ *		this function saves the architecture specific info of the task
+ *		to the struct field_arch structure passed
+ *
+ * Input:
+ *	regs,	pointer to the pt_regs field of the task
+ *
+ * Output:
+ *	arch,	pointer to the struct field_arch structure type where the
+ *			architecture specific information of the task has to be
+ *			saved
+ *
+ * Return value:
+ *	on success, returns 0
+ * 	on failure, returns negative integer
+ */
+int save_thread_info(struct field_arch *arch)
+{
+	int cpu;
+
+	cpu = get_cpu();
+
+	asm("mrs %0, tpidr_el0;" : "=r"(arch->tls));
+	arch->fpu_active = test_thread_flag(TIF_FOREIGN_FPSTATE);
+
+	put_cpu();
+
+#ifdef CONFIG_POPCORN_DEBUG_VERBOSE
+	PSPRINTK("%s [%d] tls %lx\n", __func__, current->pid, arch->tls);
+	PSPRINTK("%s [%d] fpu %sactive\n", __func__, current->pid,
+			arch->fpu_active ? "" : "in");
+#endif
+
+	return 0;
+}
+
+/*
+ * Function:
+ *		restore_thread_info
+ *
+ * Description:
+ *		this function restores the architecture specific info of the
+ *		task from the struct field_arch structure passed
+ *
+ * Input:
+ * 	arch,	pointer to the struct field_arch structure type from which the
+ *			architecture specific information of the task has to be
+ *			restored
+ *
+ * Output:
+ *	none
+ *
+ * Return value:
+ *	on success, returns 0
+ * 	on failure, returns negative integer
+ */
+int restore_thread_info(struct field_arch *arch, bool restore_segments)
+{
+	struct pt_regs *regs = current_pt_regs();
+	struct regset_aarch64 *regset = &arch->regs_aarch;
+	int cpu, i;
+
+	cpu = get_cpu();
+
+	regs->sp = regset->sp;
+	regs->pc = regset->pc;
+	regs->pstate = PSR_MODE_EL0t;
+
+	for (i = 0; i < 31; i++)
+		regs->regs[i] =  regset->x[i];
+
+	if (restore_segments) {
+		unsigned long tpidr, tpidrro;
+
+		*task_user_tls(current) = arch->tls;
+
+		tpidr = *task_user_tls(current);
+		tpidrro = is_compat_thread(current_thread_info()) ?
+			current->thread.tp_value : 0;
+		asm("msr tpidr_el0, %0;"
+			"msr tpidrro_el0, %1;"
+			: : "r" (tpidr), "r" (tpidrro));
+
+		if (arch->fpu_active) {
+			fpsimd_flush_task_state(current);
+			set_thread_flag(TIF_FOREIGN_FPSTATE);
+		}
+	}
+
+	put_cpu();
+
+#ifdef CONFIG_POPCORN_DEBUG_VERBOSE
+	PSPRINTK("%s [%d] pc %llx sp %llx\n", __func__, current->pid,
+			regs->pc, regs->sp);
+	PSPRINTK("%s [%d] fs %lx fpu %sactive\n", __func__, current->pid,
+			*task_user_tls(current), arch->fpu_active ? "" : "in");
+#if defined(CONFIG_POPCORN_DEBUG_PROCESS_SERVER)
+	show_regs(regs);
+#endif
+#endif
+
+	return 0;
+}
+
+
+noinline_for_stack void update_frame_pointer(void)
+{
+	unsigned long *rbp;
+	asm volatile("mov %0, x29" : "=r"(rbp)); /* update_frame_pointer */
+
+	/* User rbp is at one stack frames below */
+	*rbp = current_pt_regs()->regs[29];	/* sched_migrate */
+}
+
+
+/*
+ * Function:
+ *		dump_processor_regs
+ *
+ * Description:
+ *		this function prints the architecture specific registers specified
+ *		in the input argument
+ *
+ * Input:
+ * 	task,	pointer to the architecture specific registers
+ *
+ * Output:
+ * 	none
+ *
+ * Return value:
+ *	on success, returns 0
+ * 	on failure, returns negative integer
+ */
+int dump_processor_regs(struct pt_regs *regs)
+{
+	int i;
+
+	if (regs == NULL) {
+		printk(KERN_ERR"process_server: invalid params to dump_processor_regs()");
+		return 0;
+	}
+
+	dump_stack();
+
+	printk("DUMP REGS %s\n", __func__);
+
+	if (NULL != regs) {
+		printk("sp: 0x%llx\n", regs->sp);
+		printk("pc: 0x%llx\n", regs->pc);
+		printk("pstate: 0x%llx\n", regs->pstate);
+
+		for (i = 0; i < 31; i++) {
+			printk("regs[%d]: 0x%llx\n", i, regs->regs[i]);
+		}
+	}
+
+	return 0;
+}
+
+unsigned long futex_atomic_add(unsigned long ptr, unsigned long val)
+{
+	atomic64_t v;
+	unsigned long result;
+	v.counter = ptr;
+
+	result = atomic64_add_return(val, &v);
+	return (result - val);
+}
diff -uprN linux-4.4.137/arch/arm64/mm/fault.c popcorn-kernel/arch/arm64/mm/fault.c
--- linux-4.4.137/arch/arm64/mm/fault.c	2018-06-13 10:15:29.000000000 -0400
+++ popcorn-kernel/arch/arm64/mm/fault.c	2020-03-30 16:06:47.958737144 -0400
@@ -41,6 +41,11 @@
 #include <asm/pgtable.h>
 #include <asm/tlbflush.h>
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/types.h>
+#include <popcorn/vma_server.h>
+#endif
+
 static const char *fault_name(unsigned int esr);
 
 /*
@@ -214,6 +219,19 @@ static int __do_page_fault(struct mm_str
 	int fault;
 
 	vma = find_vma(mm, addr);
+#ifdef CONFIG_POPCORN
+	/* vma worker should not fault */
+	BUG_ON(tsk->is_worker);
+
+	if (distributed_remote_process(tsk)) {
+		if (!vma || vma->vm_start > addr) {
+			if (vma_server_fetch_vma(tsk, addr) == 0) {
+				/* Replace with updated VMA */
+				vma = find_vma(mm, addr);
+			}
+		}
+	}
+#endif
 	fault = VM_FAULT_BADMAP;
 	if (unlikely(!vma))
 		goto out;
@@ -346,6 +364,10 @@ retry:
 			goto retry;
 		}
 	}
+#ifdef CONFIG_POPCORN
+	else if (distributed_process(current) && (fault & VM_FAULT_RETRY))
+		return 0;
+#endif
 
 	up_read(&mm->mmap_sem);
 
